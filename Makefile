ROOT_DIR := $(CURDIR)
OUT_DIR := $(ROOT_DIR)/out
SCRIPT_DIR := $(ROOT_DIR)/scripts
CONFIG_DIR := $(ROOT_DIR)/config

SHARED_DIR := $(ROOT_DIR)/shared

VERBOSE ?= 0

ARCH ?= x86_64

GREEN := $(shell tput setaf 2)
YELLOW := $(shell tput setaf 3)
NC := $(shell tput sgr0)

ifeq ($(ARCH),aarch64)
  $(warning $(YELLOW)Incorrect architecture 'aarch64', using 'arm64' instead $(NC))
  ARCH := arm64
else ifeq ($(ARCH),x86)
  $(warning $(YELLOW)Incorrect architecture 'x86', using 'x86_64' instead $(NC))
  ARCH := x86_64
else ifeq ($(filter x86_64 arm64,$(ARCH)),)
  $(error Invalid architecture $(ARCH))
endif

.PHONY: default
default: linux tools-vm

.PHONY: clean
clean: linux_clean tools-vm_clean

.PHONY: help
help:
	@echo 'Environment Variables:'
	@echo '   ARCH                          - Specify one of the supported architectures: x86_64, arm64 (default: x86_64)'
	@echo '   ACK                           - Set to 1 if building ACK instead of the Linux kernel. Does not need to be set for `ack` and `run-ack` targets (default: 0)'
	@echo '   GDB                           - Set to 1 to start a gdbserver and wait for GDB when running QEMU (default: 0)'
	@echo '   CPU                           - Specify the number of CPUs to use when running QEMU (default: 4)'
	@echo '   MEM                           - Specify the memory size in MB to use when running QEMU (default: 1024)'
	@echo '   QEMU_EXTRA_ARGS               - Specify additional arguments to pass to QEMU (default: "")'
	@echo '   QEMU_EXTRA_KERNEL_CMDLINE     - Specify additional arguments to pass to the kernel (default: "")'
	@echo '   VERBOSE                       - Set to 1 to enable verbose output (default: 0)'
	@echo '   EXT4_SIZE                     - TODO'
	@echo '   INITRAMFS_DIR                 - TODO'
	@echo '   ROOTFS                        - TODO'
	@echo '   ROOTFS_FORMAT                 - TODO'
	@echo '   INITRD                        - TODO'
	@echo '   RDINIT                        - TODO'
	@echo '   LINUX_DEFCONFIG               - TODO'
	@echo '   LINUX_SRC                     - TODO'
	@echo '   LINUX_OUT                     - TODO'
	@echo '   KERNEL_IMAGE                  - TODO'
	@echo '   LINUX_CONFIG_FRAGMENT         - TODO'
	@echo '   VERSION                       - TODO'
	@echo ''
	@echo 'Build/Config Targets:'
	@echo '   linux (default)               - builds the Linux kernel'
	@echo '   linux_defconfig               - builds the Linux kernel'
	@echo '   linux_modules                 - builds the Linux kernel modules'
	@echo '   ack                           - builds the Android Common Kernel'
	@echo '   tools-vm                      - builds linux/tools/vm'
	@echo ''
	@echo 'Clean Targets:'
	@echo '   clean                         - cleans output from all build targets'
	@echo '   <target>_clean                - cleans output for <target>'
	@echo ''
	@echo 'Run/Debug Targets:'
	@echo '   run                           - run QEMU with the built kernel, bootloader, and rootfs image'
	@echo '   run-ack                       - same as `run` but runs ACK instead'
	@echo ''
	@echo 'rootfs Targets:'
	@echo '   rootfs-init                   - TODO'
	@echo '   rootfs                        - TODO'
	@echo '   ext4                          - TODO'
	@echo '   cpio                          - TODO'
	@echo '   rootfs-mount                  - TODO'
	@echo '   rootfs-unmount                - TODO'
	@echo ''
	@echo 'Miscellaneous:'
	@echo '   linux_download                - TODO'
	@echo '   linux_checkout                - TODO'


$(SHARED_DIR):
	mkdir -p $(SHARED_DIR)

##
## Linux Kernel and Android Common Kernel
##

ACK_TARGETS := ack ack_clean run-ack
ACK ?= 0

ACK_SRC := $(ROOT_DIR)/ack/common
ACK_OUT := $(OUT_DIR)/ack/common/$(ARCH)

ifneq ($(filter $(ACK_TARGETS),$(MAKECMDGOALS)),)
  ACK := 1
endif

# If we're building ACK instead of Linux, set the appropriate variables
ifeq ($(ACK),1)
  LINUX_SRC := $(ACK_SRC)
  LINUX_OUT := $(ACK_OUT)
  LINUX_DEFCONFIG := gki_defconfig
else
  LINUX_SRC ?= $(ROOT_DIR)/linux
  LINUX_OUT ?= $(OUT_DIR)/linux/$(ARCH)
  LINUX_DEFCONFIG ?= defconfig
endif

LINUX_CONFIG_FRAGMENT ?= $(CONFIG_DIR)/config.fragment
LINUX_OUT_MODULES_DEP := $(LINUX_OUT)/modules_install.stamp
LINUX_MODULES_INSTALL_PATH := $(LINUX_OUT)/modules_install
LINUX_CONFIG := $(LINUX_OUT)/.config

ifeq ($(ARCH),x86_64)
  TARGET := x86_64-pc-linux-gnu
  KERNEL_IMAGE ?= $(LINUX_OUT)/arch/$(ARCH)/boot/bzImage
else ifeq ($(ARCH),arm64)
  TARGET := aarch64-linux-gnu
  KERNEL_IMAGE ?= $(LINUX_OUT)/arch/$(ARCH)/boot/Image
endif

LINUX_MAKE := \
  $(MAKE) \
  -C $(LINUX_SRC) \
  ARCH=$(ARCH) \
  CROSS_COMPILE=$(TARGET)- \
  LLVM=1 LLVM_IAS=1 \
  V=$(VERBOSE) \
  O=$(LINUX_OUT)

.PHONY: linux_defconfig
linux_defconfig $(LINUX_CONFIG): $(LINUX_CONFIG_FRAGMENT)
	+ $(LINUX_MAKE) $(LINUX_DEFCONFIG)
	KCONFIG_CONFIG=$(LINUX_CONFIG) \
		$(LINUX_SRC)/scripts/kconfig/merge_config.sh \
		-m \
		$(LINUX_CONFIG) \
		$(LINUX_CONFIG_FRAGMENT)
	+ $(LINUX_MAKE) olddefconfig
	$(SCRIPT_DIR)/check_merged_config.sh $(LINUX_CONFIG) $(LINUX_CONFIG_FRAGMENT)

.PHONY: linux
linux $(KERNEL_IMAGE): $(LINUX_CONFIG)
	+ $(LINUX_MAKE)
	$(LINUX_SRC)/scripts/clang-tools/gen_compile_commands.py -d $(LINUX_OUT)

.PHONY: linux_modules
linux_modules $(LINUX_OUT_MODULES_DEP): $(KERNEL_IMAGE)
	+ $(LINUX_MAKE) modules
	+ $(LINUX_MAKE) INSTALL_MOD_PATH=$(LINUX_MODULES_INSTALL_PATH) modules_install
	@find $(LINUX_MODULES_INSTALL_PATH) -type f | sort | \
		xargs sha1sum > $(LINUX_OUT_MODULES_DEP).tmp
	@cmp $(LINUX_OUT_MODULES_DEP).tmp $(LINUX_OUT_MODULES_DEP) || \
		mv $(LINUX_OUT_MODULES_DEP).tmp $(LINUX_OUT_MODULES_DEP)

.PHONY: linux_clean
linux_clean:
	+ $(LINUX_MAKE) mrproper

# TODO: Is there a way to pick the latest version by default?
# TODO: What if they want to checkout a branch instead?
VERSION ?= 5.10.107

.PHONY: linux_download
linux_download:
	# TODO: v6.x and other versions
	wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-$(VERSION).tar.xz
	tar -xf linux-$(VERSION).tar.xz

.PHONY: linux_checkout
linux_checkout:
	cd $(LINUX_SRC) && git checkout v$(VERSION)


# These targets do the same thing as the `linux` targets, but because they're in
# `ACK_TARGETS`, the `ACK` variable is set to 1 and the ACK source and output
# directories are used instead of the Linux directories. The same thing can be
# achieved by setting the `ACK=1` environment variable, so these are just
# provided for convenience.
.PHONY: ack
ack: linux

.PHONY: ack_clean
ack_clean: linux_clean

# Because of how `tools/vm/Makefile` is designed, we can't use `$(LINUX_MAKE)`
# here, as specifying the `O` variable causes compilation errors, and `clang`
# won't properly cross-compile the binary so we need to use GCC
TOOLS_MAKE := $(MAKE) \
  -C $(LINUX_SRC)/tools \
  DESTDIR=$(SHARED_DIR) \
  sbindir=/tools/$(ARCH)

# Assuming we're building on an x86 system, we should only set `CROSS_COMPILE`
# if we're building arm64.
ifeq ($(ARCH),arm64)
  TOOLS_MAKE += CROSS_COMPILE=$(TARGET)-
endif

.PHONY: tools-vm
tools-vm: | $(SHARED_DIR)
	+ $(TOOLS_MAKE) vm_install

.PHONY: tools-vm_clean
tools-vm_clean:
	+ $(TOOLS_MAKE) vm_clean
	rm -f $(SHARED_DIR)/tools/$(ARCH)/{page_owner_sort,page-types,slabinfo}

##
## Generate rootfs images
##

ROOTFS_DIR := $(ROOT_DIR)/rootfs
ROOTFS_IMG := $(ROOTFS_DIR)/rootfs-$(ARCH).img
ALPINE_ROOTFS_DIR := $(ROOTFS_DIR)/alpine-$(ARCH)
INITRAMFS_DIR ?= $(ALPINE_ROOTFS_DIR)
CPIO_FILE := $(ROOTFS_DIR)/$$(basename $(INITRAMFS_DIR)).cpio.gz
EXT4_SIZE ?= 1G

$(ALPINE_ROOTFS_DIR):
	mkdir -p $(ALPINE_ROOTFS_DIR)

.PHONY: rootfs-init
rootfs-init: | $(ALPINE_ROOTFS_DIR)
	tar -xf $(ROOTFS_DIR)/alpine-minirootfs-*-$(ARCH).tar.gz -C $(ALPINE_ROOTFS_DIR)
	cp -f -r $(CONFIG_DIR)/rootfs-overlay/. $(ALPINE_ROOTFS_DIR)
	$(SCRIPT_DIR)/arch_specific.sh $(ARCH) $(ALPINE_ROOTFS_DIR)
	$(MAKE) ext4

.PHONY: ext4
ext4: | $(INITRAMFS_DIR)
	dd if=/dev/zero of=$(ROOTFS_IMG) bs=1 count=0 seek=$(EXT4_SIZE)
	mkfs.ext4 -b 4096 -d $(ALPINE_ROOTFS_DIR) -F $(ROOTFS_IMG)
	qemu-img convert -O qcow2 $(ROOTFS_IMG) $(ROOTFS_IMG).qcow2
	mv $(ROOTFS_IMG).qcow2 $(ROOTFS_IMG)

.PHONY: cpio
cpio: | $(INITRAMFS_DIR)
	cd $(INITRAMFS_DIR) && find . -print0 \
		| cpio --null --create --verbose --format=newc \
		| gzip --best > $(CPIO_FILE)

.PHONY: rootfs
rootfs: ext4

.PHONY: rootfs-mount
rootfs-mount:
	sudo modprobe nbd
	sudo qemu-nbd -c /dev/nbd0 --read-only $(ROOTFS_IMG)
	sudo udisksctl mount -b /dev/nbd0

.PHONY: rootfs-unmount
rootfs-unmount:
	sudo udisksctl unmount -b /dev/nbd0
	sudo qemu-nbd -d /dev/nbd0

.PHONY: rootfs_clean
rootfs_clean:
	rm -rf $(ALPINE_ROOTFS_DIR)
	rm -f $(CPIO_FILE)
	rm -f $(ROOTFS_IMG)

##
## Run QEMU
##

CPU ?= 4
MEM ?= 1024
QEMU_EXTRA_ARGS ?=
QEMU_EXTRA_KERNEL_CMDLINE ?=
GDB ?= 0
ROOTFS ?= $(ROOTFS_IMG)
ROOTFS_FORMAT ?= qcow2
INITRD ?=
RDINIT ?= /sbin/init

QEMU_ARGS := \
  -m $(MEM) \
  -smp $(CPU) \
  -nographic \
  -no-reboot \
  -kernel $(KERNEL_IMAGE) \
  -netdev user,id=eth0,hostfwd=tcp::7777-:7777,hostfwd=tcp::2222-:22,hostfwd=tcp::2223-:23 -device virtio-net-pci,netdev=eth0 \
  -virtfs local,security_model=mapped-xattr,path=$(SHARED_DIR),mount_tag=shared \
  $(QEMU_EXTRA_ARGS)

ifneq ($(INITRD),)
  QEMU_ARGS += -initrd $(INITRD)
  QEMU_EXTRA_KERNEL_CMDLINE += rdinit=$(RDINIT)
else
  QEMU_ARGS += -drive file=$(ROOTFS),if=virtio,format=$(ROOTFS_FORMAT)
  QEMU_EXTRA_KERNEL_CMDLINE += root=/dev/vda
endif

ifeq ($(GDB),1)
  QEMU_ARGS += -s -S
endif

ifeq ($(ARCH),x86_64)
  QEMU_BIN := qemu-system-x86_64
  QEMU_ARGS += \
    -cpu max \
    -append "8250.nr_uarts=1 console=ttyS0 selinux=0 kpti no5lvl $(QEMU_EXTRA_KERNEL_CMDLINE)"

  # We can't use KVM with GitHub Actions CI
  ifneq ($(CI),true)
    QEMU_ARGS += -accel kvm
  endif

else
  QEMU_BIN := qemu-system-aarch64
  QEMU_ARGS += \
    -M virt \
    -cpu cortex-a53 \
    -semihosting-config enable=on,target=native \
    -append "console=ttyAMA0 selinux=0 $(QEMU_EXTRA_KERNEL_CMDLINE)"
endif

RUN_DEPS := $(KERNEL_IMAGE)

.PHONY: run
run: $(RUN_DEPS) | $(SHARED_DIR)
	@echo "$(GREEN)Running QEMU, press 'ctrl-a x' to quit $(NC)"
ifeq ($(GDB),1)
	@echo "$(ARCH) $(ACK)" > $(OUT_DIR)/.gdb
	@echo "$(GREEN)Waiting for GDB, attach with \`scripts/gdb.sh\` $(NC)"
endif
	@echo ''
	$(QEMU_BIN) $(QEMU_ARGS)

.PHONY: run-ack
run-ack: run
