#!/bin/bash

CWD=$(dirname -- "$0")
ROOT_DIR=$CWD/..
OUT_DIR=$ROOT_DIR/out
GDB_FILE=$OUT_DIR/.gdb
GDBINIT=$CWD/gdbinit.gdb

ptrace_scope=$(cat /proc/sys/kernel/yama/ptrace_scope)
if [[ $ptrace_scope -ne 0 && $(id -u) -ne 0 ]]; then
    cat << EOF
WARNING: You are not running as root and ptrace_scope is not set to zero. If you
run into issues when using pwndbg or gdb-pt-dump, rerun this script as root, or
alternatively run the following command:

    echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope

EOF
fi

IFS=" " read -r ARCH ACK TRUSTY TRUSTY_TARGET < $GDB_FILE

TRUSTY_OUT=$OUT_DIR/trusty/build-$TRUSTY_TARGET

if [[ "$ACK" -eq 1 ]]; then
    LINUX_OUT=$OUT_DIR/ack/common/$ARCH
elif [[ "$TRUSTY" -eq 1 ]] then
    LINUX_OUT=$TRUSTY_OUT/linux-build
else
    LINUX_OUT=$OUT_DIR/linux/$ARCH
fi

OUTPUT=$(mktemp)
cp "$GDBINIT" "$OUTPUT"
echo "Using gdbscript in $OUTPUT"

sed -i "s|##LINUX_OUT##|${LINUX_OUT}|g" "$OUTPUT"
sed -i "s|##TRUSTY_OUT##|${TRUSTY_OUT}|g" "$OUTPUT"
sed -i "s|##TRUSTY##|${TRUSTY}|g" "$OUTPUT"

if [[ $ARCH == "x86_64" ]]; then
    GDB=gdb
else
    GDB=gdb-multiarch
fi

exec "${GDB}" -q -ex "source ${OUTPUT}" "$@"
